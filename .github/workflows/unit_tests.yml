name: vHive unit tests

on:
  push:
    branches: [ main ]
    paths-ignore:
    - 'docs/**'
    - '**.md'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - 'docs/**'
    - '**.md'
  workflow_dispatch:

env:
  GOOS: linux
  GO111MODULE: on

jobs:
  timeseriesdb_test:
    name: TimeseriesDB Tests
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: tools/benchmarking_eventing/timeseriesdb
    strategy:
      fail-fast: false
    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-go@v3
        with:
          go-version: 1.16

      - name: Run tests
        run: go test -v -race -cover ./...

  module_tests:
    name: Module Tests
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        module: [utils/tracing/go, utils/tracing/python, utils/storage/go ,utils/storage/python]
    steps:
    - name: Set up Go 1.16
      uses: actions/setup-go@v3
      with:
        go-version: 1.16
        
    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.9.x'

    - name: Check out code into the Go module directory
      uses: actions/checkout@v3

    - name: Get extra python packages
      run: pip3 install -r ./utils/tracing/python/requirements.txt && pip3 install -r ./utils/storage/python/requirements.txt

    - name: Run tests in submodules
      env:
          MODULE: ${{ matrix.module }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
      run: |
        make -C $MODULE test
        make -C $MODULE test-man

  bench-python-tracing:
    name: Python Tracing tests (docker-compose)
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./utils/tracing/integ-tests/client-server
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: build local images
      run: make all-image
    - name: Python client with docker-compose
      run: |
        docker-compose up --exit-code-from client
    - name: Golang client with docker-compose
      run: |
        docker-compose --file ./docker-compose-goclient.yml up --exit-code-from client
