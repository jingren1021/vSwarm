name: Online Shop End-to-End Tests

on:
  workflow_dispatch:
  schedule:
    - cron: "0 9 * * 1"
  push:
    branches: [main]
    paths:
      - 'benchmarks/online-shop/*'
      - "utils/**"
      - "tools/**"
      - "runner/**"

  pull_request:
    branches: [main]
    paths:
      - 'benchmarks/online-shop/*'
      - "utils/**"
      - "tools/**"
      - "runner/**"

env:
  GOOS: linux
  GO111MODULE: on
  PORT: 50000
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  build-and-push:
    name: Build and push all images
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - service: adservice
            context: benchmarks/online-shop/adservice/
          - service: cartservice
            context: benchmarks/online-shop/cartservice/src/
          - service: checkoutservice
            context: benchmarks/online-shop/checkoutservice/
          - service: currencyservice
            context: benchmarks/online-shop/currencyservice/
          - service: emailservice
            context: benchmarks/online-shop/emailservice/
          - service: paymentservice
            context: benchmarks/online-shop/paymentservice/
          - service: productcatalogservice
            context: benchmarks/online-shop/productcatalogservice/
          - service: recommendationservice
            context: benchmarks/online-shop/recommendationservice/
          - service: shippingservice
            context: benchmarks/online-shop/shippingservice/

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and push
        env:
            GOPRIVATE_KEY: ${{ secrets.XDT_REPO_ACCESS_KEY }}
        uses: docker/build-push-action@v3
        with:
          push: true
          file: ${{ matrix.context }}/Dockerfile
          platforms: ${{ env.PLATFORMS }}
          tags: vhiveease/onlineshop-${{ matrix.service }}:latest
          context: ${{ matrix.context }}

  test-compose:
    name: Test Docker Compose
    needs: build-and-push
    env:
      YAML_DIR: benchmarks/online-shop/yamls/docker-compose/
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            adservice,
            cartservice,
            checkoutservice,
            currencyservice,
            emailservice,
            paymentservice,
            productcatalogservice,
            recommendationservice,
            shippingservice,
          ]

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v3
        with:
          lfs: "true"

      - name: start docker-compose benchmark
        run: |
          docker-compose -f ${{ env.YAML_DIR }}/dc-${{ matrix.service }}.yaml pull
          docker-compose -f ${{ env.YAML_DIR }}/dc-${{ matrix.service }}.yaml up &> log_file &
          sleep 60s
          cat log_file

      - name: invoke the chain
        run: |
          ./tools/bin/grpcurl -plaintext localhost:50000 helloworld.Greeter.SayHello

      - name: show docker-compose log
        run: cat log_file

  test-knative:
    name: Test Knative Deployment
    needs: build-and-push
    env:
      KIND_VERSION: v0.14.0
      K8S_VERSION: v1.23
      YAML_DIR: benchmarks/online-shop/yamls/knative/

    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        service:
          [
            adservice,
            cartservice,
            checkoutservice,
            currencyservice,
            emailservice,
            paymentservice,
            productcatalogservice,
            recommendationservice,
            shippingservice,
          ]
        include:
          - service: cartservice
            database: yes

    steps:
      - uses: actions/checkout@v3
        with:
          lfs: "true"
      - name: Checkout LFS objects
        run: git lfs checkout

      - uses: actions/setup-go@v3
        with:
          go-version: 1.18

      ## Setup a Knative cluster to test the service
      - name: Create k8s Kind Cluster
        run: bash ./runner/scripts/01-kind.sh

      - name: Install Serving
        run: bash ./runner/scripts/02-serving.sh

      - name: Install Kourier
        run: bash ./runner/scripts/02-kourier.sh

      - name: Setup domain
        run: |
          INGRESS_HOST="127.0.0.1"
          KNATIVE_DOMAIN=$INGRESS_HOST.sslip.io
          kubectl patch configmap -n knative-serving config-domain -p "{\"data\": {\"$KNATIVE_DOMAIN\": \"\"}}"


      ## Test the service
      - name: Deploy database if needed
        if: matrix.database == 'yes'
        run: |
          kubectl apply -f ${{ env.YAML_DIR }}database.yaml

      - name: Deploy knative
        run: |
          kubectl apply -f ${{ env.YAML_DIR }}/kn-${{ matrix.service }}.yaml

      - name: Check if service is ready
        run: |
          kubectl wait --for=condition=Ready -f ${{ env.YAML_DIR }}/kn-${{ matrix.service }}.yaml --timeout 120s
          kubectl get service
          kubectl get -f ${{ env.YAML_DIR }}/kn-${{ matrix.service }}.yaml

      - name: Test invoking once
        working-directory: tools/test-client
        run: |
          set -x
          go build ./test-client.go

          NODEPORT=80
          url=$(kubectl get kservice ${{ matrix.service }} | awk '$2 ~ /http/ {sub(/http\:\/\//,""); print $2}')

          ./test-client --addr $url:$NODEPORT --name "Example text for CI"


      - name: Print logs
        if: ${{ always() }}
        run: |
          set -x
          container_list=$(kubectl get pods -n default -l serving.knative.dev/service=${{ matrix.service }} -o jsonpath="{.items[*].spec.containers[*].name}")
          echo $container_list
          for container_name in $container_list
          do
            kubectl logs -n default -c $container_name -l serving.knative.dev/service=${{ matrix.service }}
          done

      - name: Down
        if: ${{ always() }}
        run: |
          kubectl delete -f ${{ env.YAML_DIR }}/kn-${{ matrix.service }}.yaml --namespace default --wait

      - name: Print logs from database
        if: matrix.database == 'yes'
        run: |
          set -x
          kubectl logs deployment/online-shop-database

      - name: Down DB
        if: matrix.database == 'yes'
        run: |
          kubectl delete -f ${{ env.YAML_DIR }}/database.yaml
